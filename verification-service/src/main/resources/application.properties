spring.application.name=verification-service
server.port=${SERVER_PORT}

# Eureka Configuration
eureka.instance.hostname=${spring.application.name}
eureka.instance.prefer-ip-address=true
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}

# DataSource Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.show-sql=true

# Hibernate Properties
### The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

### Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update

# Redis Configuration
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.database=${REDIS_DATABASE}

# Kafka Configuration
spring.kafka.consumer.group-id=${spring.application.name}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

### Kafka Topic
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

### Kafka Internal Topic
spring.kafka.topic.customer.verified=${KAFKA_TOPIC_CUSTOMER_VERIFIED}
spring.kafka.topic.notification.email.single=${KAFKA_TOPIC_NOTIFICATION_EMAIL_SINGLE}